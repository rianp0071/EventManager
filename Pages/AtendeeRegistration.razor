@page "/event/{EventId}/attendeeregistration"
@using EventManagerApp.Services
@inject NavigationManager NavManager

@code {
    private string? attendeeName;
    private string? attendeeEmail;
    private DateTime? attendeeDate;

    [Inject]
    public IEventService? EventService { get; set; }

    [Parameter]
    public string? EventId { get; set; }

    private Event? currentEvent;

    private async Task SubmitAttendee()
    {
        // Logic to save the attendee
        if (!string.IsNullOrWhiteSpace(attendeeName) && !string.IsNullOrWhiteSpace(attendeeEmail) && attendeeDate.HasValue)
        {
            if (int.TryParse(EventId, out var eventId))
            {
                try 
                {
                    currentEvent = await EventService.GetEventByIdAsync(eventId);
                    if (currentEvent == null)
                    {
                        Console.WriteLine("Event not found.");
                        return;
                    }
                    else {
                        EventService?.AddAttendee(eventId, new Attendee
                        {
                            Id = EventService.GetNextAttendeeId(eventId), // Assuming GetNextId() generates a new unique ID
                            Name = attendeeName.Trim(),
                            Email = attendeeEmail.Trim(),
                            RegistrationDate = attendeeDate.Value,
                            EventId = eventId, // Assuming EventId is available in the context
                            Event = currentEvent // Assuming you have the current event object
                        });

                        // Clear the input fields after submission
                        attendeeName = string.Empty;
                        attendeeEmail = string.Empty;
                        attendeeDate = null;

                        Console.WriteLine("Attendee registered successfully!");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching event: {ex.Message}");
                }
            }
           
        }
        else
        {
            // Handle the case where the input is invalid
            Console.WriteLine("Attendee name, email, and registration date cannot be empty.");
            return;
        }

        NavManager.NavigateTo($"/event/{EventId}");
    }

        
}


<h3>Register Attendees</h3>
<input @bind="attendeeName" placeholder="Attendee Name" />
<br />
<input type="email" @bind="attendeeEmail" placeholder="Attendee Email" />
<br />
<input type="date" @bind="attendeeDate" />
<br />
<button @onclick="SubmitAttendee">Submit</button>

